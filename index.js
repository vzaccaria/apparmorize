#!/usr/bin/env node
// Generated by LiveScript 1.3.0
(function(){
  "use strict";
  var fs, path, _, __, ___, debug, lock, npmDir, getCommandOptions, initLiquid, getProfilesPrefix, genProfile, checkExistingProfile, copy, restartApparmor, getNextAvailable, putBack, initConfig, getNextLocked, step, putBackLocked, removeProfiles, main;
  fs = require('fs');
  path = require('path');
  _ = require('shelljs');
  __ = require('bluebird');
  ___ = require('lodash');
  debug = require('debug')('apparmorize');
  lock = require('lockfile');
  fs = __.promisifyAll(fs);
  npmDir = path.dirname(__filename);
  getCommandOptions = function(){
    var docopt, doc, getOption, o, spoolDir, templateName, go, numberOfInstances, install, run, remove, program;
    docopt = require('docopt').docopt;
    doc = _.cat(__dirname + "/docs/usage.md");
    getOption = function(a, b, def, o){
      if (!o[a] && !o[b]) {
        return def;
      } else {
        return o[b];
      }
    };
    o = docopt(doc);
    spoolDir = getOption('-s', '--spool', process.cwd() + "/spool", o);
    templateName = getOption('-p', '--profile', 'standard', o);
    go = getOption('-g', '--go', false, o);
    numberOfInstances = getOption('-n', '--number', 1, o);
    numberOfInstances = parseInt(numberOfInstances);
    install = o['install'] != null && o['install'];
    run = o['run'] != null && o['run'];
    remove = o['remove'] != null && o['remove'];
    program = o['PROGRAM'];
    return {
      install: install,
      run: run,
      go: go,
      remove: remove,
      spoolDir: path.resolve(spoolDir),
      templateName: templateName,
      program: program,
      numberOfInstances: numberOfInstances
    };
  };
  initLiquid = function(){
    var engine;
    engine = require('liquid-node').Engine;
    return new engine();
  };
  getProfilesPrefix = function(spoolDir){
    var absoluteFilename, profileName;
    absoluteFilename = path.resolve(spoolDir);
    profileName = absoluteFilename.replace('/', '');
    profileName = profileName.replace(/\//g, '.');
    return "/etc/apparmor.d/" + profileName;
  };
  genProfile = function(liquid, commandName, spoolDir, templateNameA, go){
    var templateData, fileName, absoluteFilename, profileName, object;
    templateData = fs.readFileSync(templateNameA, 'utf-8');
    spoolDir = path.resolve(spoolDir);
    fileName = spoolDir + "/" + commandName;
    absoluteFilename = path.resolve(fileName);
    profileName = absoluteFilename.replace('/', '');
    profileName = profileName.replace(/\//g, '.');
    object = {
      profile: {
        date: require('moment')().format('MMMM DDD, YYYY - HH:MM'),
        programName: absoluteFilename,
        profileName: profileName
      }
    };
    return liquid.parseAndRender(templateData, object).then(function(it){
      if (!go) {
        step("Will write profile to " + spoolDir + "/" + profileName, "WRT");
        return spoolDir + "/" + profileName;
      } else {
        debug("Writing profile to " + spoolDir + "/" + profileName);
        return fs.writeFileAsync(spoolDir + "/" + profileName, it, 'utf-8').then(function(){
          return spoolDir + "/" + profileName;
        });
      }
    });
  };
  checkExistingProfile = function(templateName){
    var templateNameA;
    templateNameA = npmDir + "/profiles/" + templateName + "/profile.txt";
    if (!_.test('-e', templateNameA + "")) {
      console.log("Sorry, profile '" + templateNameA + "' does not exist");
      process.exit(1);
    }
    return {
      templateNameA: templateNameA
    };
  };
  copy = function(name, fromDir, go){
    var completeName, destinationName;
    completeName = name + "";
    destinationName = "/etc/apparmor.d";
    if (!go) {
      return step(completeName + " to " + destinationName, "CPY");
    } else {
      debug("Copying " + completeName + " to " + destinationName);
      return _.cp(completeName, destinationName);
    }
  };
  restartApparmor = function(go){
    if (!go) {
      return step("Will restart apparmor", 'EXC');
    } else {
      debug("Will restart apparmor");
      return __.promisify(_.exec)("service apparmor reload");
    }
  };
  getNextAvailable = function(config){
    var data, av;
    data = JSON.parse(_.cat(config));
    av = ___.filter(data.resources, function(it){
      return it.available;
    });
    if (av.length === 0) {
      debug("No resource available");
      return 0;
    } else {
      av[0].available = false;
      debug("Got " + av[0].number);
      debug(data);
      return av[0].number;
    }
  };
  putBack = function(config, n){
    var data, av;
    data = JSON.parse(_.cat(config));
    av = ___.filter(data.resources, function(it){
      return it.number === n;
    });
    av[0].available = true;
    debug("Restored resource");
    return debug(data);
  };
  initConfig = function(spoolDir, numberOfInstances){
    var dta, res$, i$, ref$, len$, i;
    dta = {};
    res$ = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      res$.push({
        number: i,
        available: true
      });
    }
    dta.resources = res$;
    return JSON.stringify(dta, 0, 4).to(spoolDir + "/config.json");
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 1, to$ = numberOfInstances; i$ <= to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  };
  getNextLocked = function(lockFile, config){
    return lock.lockAsync(lockFile).then(function(){
      return getNextAvailable(config);
    }).then(function(n){
      lock.unlockAsync(lockFile);
      return n;
    });
  };
  step = function(s, type){
    type == null && (type = 'GEN');
    return console.log(" * " + type + ": " + s + " ");
  };
  putBackLocked = function(lockFile, config, n){
    return lock.lockAsync(lockFile, {
      retries: 3,
      retryWait: 100
    }).then(function(){
      return putBack(config, n);
    }).then(function(){
      return lock.unlockAsync(lockFile);
    });
  };
  removeProfiles = function(opts){
    var spoolDir, go, pref, e;
    spoolDir = opts.spoolDir, go = opts.go;
    pref = getProfilesPrefix(spoolDir);
    try {
      _.ls(pref + "*").map(function(it){
        if (!opts.go) {
          return step("I'd remove " + it, "RMV");
        } else {
          return _.rm("-f", it);
        }
      });
      return restartApparmor(opts.go).error(function(){
        return console.error("PANIC! Cannot restart apparmor.");
      });
    } catch (e$) {
      e = e$;
      console.error("You cannot really do this.. check for permissions");
      return process.exit(1);
    }
  };
  main = function(){
    var opts, install, run, remove, go, templateName, templateNameA, liquid, numberOfInstances, spoolDir, program, config, lockFile, n, error;
    opts = getCommandOptions();
    debug(opts);
    install = opts.install, run = opts.run, remove = opts.remove, go = opts.go;
    if (!go && !run) {
      console.log("\nThe following are the steps that will be done once you invoke this script with -g\n");
    }
    if (install) {
      templateName = opts.templateName;
      templateNameA = checkExistingProfile(templateName).templateNameA;
      liquid = initLiquid();
      numberOfInstances = opts.numberOfInstances, spoolDir = opts.spoolDir, templateName = opts.templateName;
      _.mkdir('-p', spoolDir);
      return __.all((function(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = numberOfInstances; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }()).map(function(i){
        return genProfile(liquid, "cmd-" + i, spoolDir, templateNameA, opts.go).then(function(it){
          return copy(it, spoolDir, opts.go);
        });
      })).then(function(){
        return initConfig(spoolDir, numberOfInstances);
      }).then(function(){
        return restartApparmor(opts.go);
      }).then(function(){
        return console.log("done.");
      }).error(function(it){
        return console.error("Sorry, cannot install: " + it);
      });
    } else {
      if (run) {
        spoolDir = opts.spoolDir, program = opts.program;
        config = spoolDir + "/config.json";
        lockFile = spoolDir + "/lock";
        lock.lockAsync = __.promisify(lock.lock);
        lock.unlockAsync = __.promisify(lock.unlock);
        try {
          return getNextLocked(lockFile, config).then(function(it){
            return n = it;
          }).then(function(){
            if (n === 0) {
              console.error("all slots are taken.");
              return process.exit(1);
            } else {
              _.cp('-f', path.resolve(program), spoolDir + "/cmd-" + n);
              return __.promisify(_.exec)(spoolDir + "/cmd-" + n).error(function(){
                return console.error("Program tried to break out. Killed by apparmor");
              })['finally'](function(){
                return putBackLocked(lockFile, config, n);
              });
            }
          });
        } catch (e$) {
          error = e$;
          console.error("Sorry, " + error);
          return process.exit(2);
        }
      } else {
        if (remove) {
          return removeProfiles(opts);
        }
      }
    }
  };
  main();
}).call(this);

#!/usr/bin/env node
// Generated by LiveScript 1.3.1
(function(){
  "use strict";
  var fs, path, _, __, npmDir, getCommandOptions, initLiquid, genProfile, checkExistingProfile, main;
  fs = require('fs');
  path = require('path');
  _ = require('shelljs');
  __ = require('bluebird');
  fs = __.promisifyAll(fs);
  npmDir = path.dirname(__filename);
  getCommandOptions = function(){
    var docopt, doc, getOption, o, spoolDir, templateName, numberOfInstances, install, run, program;
    docopt = require('docopt').docopt;
    doc = _.cat(__dirname + "/docs/usage.md");
    getOption = function(a, b, def, o){
      if (!o[a] && !o[b]) {
        return def;
      } else {
        return o[b];
      }
    };
    o = docopt(doc);
    spoolDir = getOption('-s', '--spool', process.cwd() + "/spool", o);
    templateName = getOption('-p', '--profile', 'standard', o);
    numberOfInstances = getOption('-n', '--number', 1, o);
    numberOfInstances = parseInt(numberOfInstances);
    install = o['install'] != null && o['install'];
    run = o['run'] != null && o['run'];
    program = o['PROGRAM'];
    return {
      install: install,
      run: run,
      spoolDir: path.resolve(spoolDir),
      templateName: templateName,
      program: program,
      numberOfInstances: numberOfInstances
    };
  };
  initLiquid = function(){
    var engine;
    engine = require('liquid-node').Engine;
    return new engine();
  };
  genProfile = function(liquid, commandName, spoolDir, templateNameA){
    var templateData, fileName, absoluteFilename, profileName, object;
    templateData = fs.readFileSync(templateNameA, 'utf-8');
    spoolDir = path.resolve(spoolDir);
    fileName = spoolDir + "/" + commandName;
    absoluteFilename = path.resolve(fileName);
    profileName = absoluteFilename.replace('/', '');
    profileName = profileName.replace(/\//g, '.');
    object = {
      profile: {
        date: require('moment')().format('MMMM DDD, YYYY - HH:MM'),
        programName: absoluteFilename,
        profileName: profileName
      }
    };
    return liquid.parseAndRender(templateData, object).then(function(it){
      return fs.writeFileAsync(spoolDir + "/" + profileName, it, 'utf-8');
    });
  };
  checkExistingProfile = function(templateName){
    var templateNameA;
    templateNameA = npmDir + "/profiles/" + templateName + "/profile.txt";
    if (!_.test('-e', templateNameA + "")) {
      console.log("Sorry, profile '" + templateNameA + "' does not exist");
      process.exit(1);
    }
    return {
      templateNameA: templateNameA
    };
  };
  main = function(){
    var opts, install, run, templateName, templateNameA, liquid, numberOfInstances, spoolDir;
    opts = getCommandOptions();
    install = opts.install, run = opts.run;
    if (install) {
      templateName = opts.templateName;
      templateNameA = checkExistingProfile(templateName).templateNameA;
      liquid = initLiquid();
      numberOfInstances = opts.numberOfInstances, spoolDir = opts.spoolDir, templateName = opts.templateName;
      _.mkdir('-p', spoolDir);
      return __.all((function(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = numberOfInstances; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }()).map(function(i){
        return genProfile(liquid, "cmd-" + i, spoolDir, templateNameA).then(function(){
          return JSON.stringify(opts, 0, 4).to(spoolDir + "/config.json");
        });
      }));
    } else {
      return console.log("not implemented yet");
    }
  };
  main();
}).call(this);
